{
  "address": "0xA3410F89bD9AF9858100062123717d2b21e31e53",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wToken_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "InvalidValueSent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gateway",
          "type": "address"
        }
      ],
      "name": "RecipientNotGateway",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroRecipientAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "inputNullifiers",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[2]",
              "name": "outputCommitments",
              "type": "bytes32[2]"
            },
            {
              "internalType": "uint256",
              "name": "publicAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "extDataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ProofArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput1",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput2",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExtData",
          "name": "extData",
          "type": "tuple"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wToken",
      "outputs": [
        {
          "internalType": "contract IWToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "unwrappedTokenReceiver",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "inputNullifiers",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[2]",
              "name": "outputCommitments",
              "type": "bytes32[2]"
            },
            {
              "internalType": "uint256",
              "name": "publicAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "extDataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ProofArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput1",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput2",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExtData",
          "name": "extData",
          "type": "tuple"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x69488360337eaa1e3818aa637c52c10fab3b9d58819067b92880c9e086d7f0df",
  "receipt": {
    "to": null,
    "from": "0xE6D21Ad1Ea84177F365aEcdDa15573916B548943",
    "contractAddress": "0xA3410F89bD9AF9858100062123717d2b21e31e53",
    "transactionIndex": 0,
    "gasUsed": "1022379",
    "logsBloom": "0x
    "blockHash": "0x5e5e071e67cadea806444a946cf524ef65b69a73235c8aa97b2a043363c3a6bd",
    "transactionHash": "0x69488360337eaa1e3818aa637c52c10fab3b9d58819067b92880c9e086d7f0df",
    "logs": [],
    "blockNumber": 2560805,
    "cumulativeGasUsed": "1022379",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8D08ac9a511581C7e5BDf8CEd27b7353d0EB7e40"
  ],
  "numDeployments": 1,
  "solcInputHash": "6274893e2403d7be0b7c5214fecfbfff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InvalidValueSent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gateway\",\"type\":\"address\"}],\"name\":\"RecipientNotGateway\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroRecipientAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"inputNullifiers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"outputCommitments\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256\",\"name\":\"publicAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ProofArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput2\",\"type\":\"bytes\"}],\"internalType\":\"struct ExtData\",\"name\":\"extData\",\"type\":\"tuple\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wToken\",\"outputs\":[{\"internalType\":\"contract IWToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unwrappedTokenReceiver\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"inputNullifiers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"outputCommitments\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256\",\"name\":\"publicAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ProofArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput2\",\"type\":\"bytes\"}],\"internalType\":\"struct ExtData\",\"name\":\"extData\",\"type\":\"tuple\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WTokenGateway.sol\":\"WTokenGateway\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/WTokenGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IWToken.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IWTokenGateway.sol\\\";\\nimport {ProofArgs, ExtData} from \\\"./helpers/DataTypes.sol\\\";\\n\\ncontract WTokenGateway is IWTokenGateway {\\n    IWToken public immutable wToken;\\n\\n    constructor(address wToken_) {\\n        wToken = IWToken(wToken_);\\n    }\\n\\n    function deposit(\\n        address pool,\\n        ProofArgs calldata args,\\n        ExtData calldata extData\\n    ) external payable {\\n        if (msg.value != extData.amount) {\\n            revert InvalidValueSent(msg.value, extData.amount);\\n        }\\n\\n        wToken.deposit{value: extData.amount}();\\n        wToken.approve(pool, extData.amount);\\n        IPool(pool).deposit(args, extData);\\n    }\\n\\n    function withdraw(\\n        address pool,\\n        address unwrappedTokenReceiver,\\n        ProofArgs calldata args,\\n        ExtData calldata extData\\n    ) external {\\n        if (extData.recipient != address(this)) {\\n            revert RecipientNotGateway(extData.recipient, address(this));\\n        }\\n\\n        if (unwrappedTokenReceiver == address(0)) {\\n            revert ZeroRecipientAddress();\\n        }\\n\\n        uint256 withdrawAmount = IPool(pool).withdraw(args, extData);\\n\\n        wToken.approve(address(wToken), withdrawAmount);\\n        wToken.withdraw(withdrawAmount);\\n\\n        _safeTransferETH(unwrappedTokenReceiver, withdrawAmount);\\n    }\\n\\n    function _safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x3499807215d3c08d7df288e5e6b67cc244593c66aabf19897915826168e26a65\",\"license\":\"MIT\"},\"contracts/helpers/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nenum TxType {\\n    DEPOSIT,\\n    WITHDRAW,\\n    TRANSFER\\n}\\n\\nstruct ExtData {\\n    address recipient;\\n    uint256 amount;\\n    address relayer;\\n    uint256 fee;\\n    bytes encryptedOutput1;\\n    bytes encryptedOutput2;\\n}\\n\\nstruct Proof {\\n    uint256[2] a;\\n    uint256[2][2] b;\\n    uint256[2] c;\\n}\\n\\nstruct ProofArgs {\\n    Proof proof;\\n    bytes32 root;\\n    bytes32[] inputNullifiers;\\n    bytes32[2] outputCommitments;\\n    uint256 publicAmount;\\n    bytes32 extDataHash;\\n}\\n\",\"keccak256\":\"0x7492cc7153661cd5458bdef66288b84a2bae07fc8fdf49e6b4a261b5f1183407\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {ProofArgs, ExtData} from \\\"../helpers/DataTypes.sol\\\";\\n\\ninterface IPool {\\n    event CommitmentInserted(bytes32 commitment, uint256 leafIndex, bytes encryptedOutput);\\n    event NullifierUsed(bytes32 nullifier);\\n\\n    error InvalidTxProof();\\n    error UnknownMerkleRoot();\\n    error InputNullifierAlreadyUsed(bytes32 usedNullifier);\\n    error InvalidExtDataHash(bytes32 extDataHash);\\n    error InvalidPublicAmount(uint256 publicAmount);\\n    error InvalidAmount(uint256 amount);\\n    error ZeroRecipientAddress();\\n    error DepositAmountExceedsMaxLimit(uint256 amount, uint256 maxAmountAllowed);\\n    error FeeExceedsMaxLimit(uint256 fee, uint256 maxFeeAllowed);\\n    error ExtAmountExceedsMaxLimit(uint256 extAmount, uint256 maxExtAmountAllowed);\\n    error SanctionedAddress(address addr);\\n\\n    function deposit(ProofArgs calldata args, ExtData calldata extData) external returns (uint256);\\n\\n    function withdraw(ProofArgs calldata args, ExtData calldata extData) external returns (uint256);\\n\\n    function transfer(ProofArgs calldata args, ExtData calldata extData) external;\\n\\n    function verifyProof(ProofArgs calldata args) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6adfdb165b0ff7c1236f7f0da2418962c87b0ab0cd4bc1d9a0d556dd6b4670bc\",\"license\":\"MIT\"},\"contracts/interfaces/IWToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWToken is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 value) external;\\n}\\n\",\"keccak256\":\"0xd0c09e61f7d692509bd3d0cc7307bd20770b2de81ae02b5acfc30627e151e54d\",\"license\":\"MIT\"},\"contracts/interfaces/IWTokenGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {ProofArgs, ExtData} from \\\"../helpers/DataTypes.sol\\\";\\n\\ninterface IWTokenGateway {\\n    error ZeroRecipientAddress();\\n    error InvalidValueSent(uint256 sent, uint256 required);\\n    error RecipientNotGateway(address recipient, address gateway);\\n\\n    function deposit(\\n        address pool,\\n        ProofArgs calldata args,\\n        ExtData calldata extData\\n    ) external payable;\\n\\n    function withdraw(\\n        address pool,\\n        address unwrappedTokenReceiver,\\n        ProofArgs calldata args,\\n        ExtData calldata extData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4eb5e4a50df01e4a30f628a9c449da345a5bd151e2fe7aa8db49736c8e5915b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012d2380380620012d28339818101604052810190620000379190620000dc565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b620000b68162000097565b8114620000c257600080fd5b50565b600081519050620000d681620000ab565b92915050565b600060208284031215620000f557620000f462000072565b5b60006200010584828501620000c5565b91505092915050565b6080516111856200014d6000396000818161023401528181610270015281816102f30152818161038f01528181610401015261048601526111856000f3fe6080604052600436106100385760003560e01c8063078c4830146100445780630babd8641461006d5780635e9de659146100985761003f565b3661003f57005b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190610757565b6100b4565b005b34801561007957600080fd5b5061008261038d565b60405161008f9190610855565b60405180910390f35b6100b260048036038101906100ad9190610870565b6103b1565b005b3073ffffffffffffffffffffffffffffffffffffffff168160000160208101906100de91906108fb565b73ffffffffffffffffffffffffffffffffffffffff161461014a5780600001602081019061010c91906108fb565b306040517fb52905ef000000000000000000000000000000000000000000000000000000008152600401610141929190610937565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036101b0576040517fceef985700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff16636c3bc78584846040518363ffffffff1660e01b81526004016101ed929190610ec1565b6020604051808303816000875af115801561020c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102309190610f0d565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004016102ad929190610f49565b6020604051808303816000875af11580156102cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f09190610faa565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040161034a9190610fd7565b600060405180830381600087803b15801561036457600080fd5b505af1158015610378573d6000803e3d6000fd5b5050505061038684826105ab565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b806020013534146103ff573481602001356040517f71d5abb30000000000000000000000000000000000000000000000000000000081526004016103f6929190610ff2565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db082602001356040518263ffffffff1660e01b81526004016000604051808303818588803b15801561046b57600080fd5b505af115801561047f573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b38483602001356040518363ffffffff1660e01b81526004016104e3929190610f49565b6020604051808303816000875af1158015610502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105269190610faa565b508273ffffffffffffffffffffffffffffffffffffffff1663ac79e30183836040518363ffffffff1660e01b8152600401610562929190610ec1565b6020604051808303816000875af1158015610581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a59190610f0d565b50505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff8111156105e0576105df61101b565b5b6040519080825280601f01601f1916602001820160405280156106125781602001600182028036833780820191505090505b5060405161062091906110bb565b60006040518083038185875af1925050503d806000811461065d576040519150601f19603f3d011682016040523d82523d6000602084013e610662565b606091505b50509050806106a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069d9061112f565b60405180910390fd5b505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106e0826106b5565b9050919050565b6106f0816106d5565b81146106fb57600080fd5b50565b60008135905061070d816106e7565b92915050565b600080fd5b60006101c0828403121561072f5761072e610713565b5b81905092915050565b600060c0828403121561074e5761074d610713565b5b81905092915050565b60008060008060808587031215610771576107706106ab565b5b600061077f878288016106fe565b9450506020610790878288016106fe565b935050604085013567ffffffffffffffff8111156107b1576107b06106b0565b5b6107bd87828801610718565b925050606085013567ffffffffffffffff8111156107de576107dd6106b0565b5b6107ea87828801610738565b91505092959194509250565b6000819050919050565b600061081b610816610811846106b5565b6107f6565b6106b5565b9050919050565b600061082d82610800565b9050919050565b600061083f82610822565b9050919050565b61084f81610834565b82525050565b600060208201905061086a6000830184610846565b92915050565b600080600060608486031215610889576108886106ab565b5b6000610897868287016106fe565b935050602084013567ffffffffffffffff8111156108b8576108b76106b0565b5b6108c486828701610718565b925050604084013567ffffffffffffffff8111156108e5576108e46106b0565b5b6108f186828701610738565b9150509250925092565b600060208284031215610911576109106106ab565b5b600061091f848285016106fe565b91505092915050565b610931816106d5565b82525050565b600060408201905061094c6000830185610928565b6109596020830184610928565b9392505050565b600082905092915050565b600082905092915050565b82818337505050565b61098b60408383610976565b5050565b600082905092915050565b600060029050919050565b600081905092915050565b6000819050919050565b60006109c6838361097f565b60408301905092915050565b6000604082019050919050565b6109e88161099a565b6109f281846109a5565b92506109fd826109b0565b8060005b83811015610a3657610a13828461096b565b610a1d87826109ba565b9650610a28836109d2565b925050600181019050610a01565b505050505050565b6101008201610a50600083018361096b565b610a5d600085018261097f565b50610a6b604083018361098f565b610a7860408501826109df565b50610a8660c083018361096b565b610a9360c085018261097f565b50505050565b6000819050919050565b610aac81610a99565b8114610ab757600080fd5b50565b600081359050610ac981610aa3565b92915050565b6000610ade6020840184610aba565b905092915050565b610aef81610a99565b82525050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610b2157610b20610aff565b5b83810192508235915060208301925067ffffffffffffffff821115610b4957610b48610af5565b5b602082023603831315610b5f57610b5e610afa565b5b509250929050565b600082825260208201905092915050565b600080fd5b6000610b898385610b67565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115610bbc57610bbb610b78565b5b602083029250610bcd838584610976565b82840190509392505050565b600082905092915050565b610bf060408383610976565b5050565b6000819050919050565b610c0781610bf4565b8114610c1257600080fd5b50565b600081359050610c2481610bfe565b92915050565b6000610c396020840184610c15565b905092915050565b610c4a81610bf4565b82525050565b60006101c08301610c646000840184610960565b610c716000860182610a3e565b50610c80610100840184610acf565b610c8e610100860182610ae6565b50610c9d610120840184610b04565b858303610120870152610cb1838284610b7d565b92505050610cc3610140840184610bd9565b610cd1610140860182610be4565b50610ce0610180840184610c2a565b610cee610180860182610c41565b50610cfd6101a0840184610acf565b610d0b6101a0860182610ae6565b508091505092915050565b6000610d2560208401846106fe565b905092915050565b610d36816106d5565b82525050565b60008083356001602003843603038112610d5957610d58610aff565b5b83810192508235915060208301925067ffffffffffffffff821115610d8157610d80610af5565b5b600182023603831315610d9757610d96610afa565b5b509250929050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610ddc8385610d9f565b9350610de9838584610db0565b610df283610dbf565b840190509392505050565b600060c08301610e106000840184610d16565b610e1d6000860182610d2d565b50610e2b6020840184610c2a565b610e386020860182610c41565b50610e466040840184610d16565b610e536040860182610d2d565b50610e616060840184610c2a565b610e6e6060860182610c41565b50610e7c6080840184610d3c565b8583036080870152610e8f838284610dd0565b92505050610ea060a0840184610d3c565b85830360a0870152610eb3838284610dd0565b925050508091505092915050565b60006040820190508181036000830152610edb8185610c50565b90508181036020830152610eef8184610dfd565b90509392505050565b600081519050610f0781610bfe565b92915050565b600060208284031215610f2357610f226106ab565b5b6000610f3184828501610ef8565b91505092915050565b610f4381610bf4565b82525050565b6000604082019050610f5e6000830185610928565b610f6b6020830184610f3a565b9392505050565b60008115159050919050565b610f8781610f72565b8114610f9257600080fd5b50565b600081519050610fa481610f7e565b92915050565b600060208284031215610fc057610fbf6106ab565b5b6000610fce84828501610f95565b91505092915050565b6000602082019050610fec6000830184610f3a565b92915050565b60006040820190506110076000830185610f3a565b6110146020830184610f3a565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050919050565b600081905092915050565b60005b8381101561107e578082015181840152602081019050611063565b60008484015250505050565b60006110958261104a565b61109f8185611055565b93506110af818560208601611060565b80840191505092915050565b60006110c7828461108a565b915081905092915050565b600082825260208201905092915050565b7f4554485f5452414e534645525f4641494c454400000000000000000000000000600082015250565b60006111196013836110d2565b9150611124826110e3565b602082019050919050565b600060208201905081810360008301526111488161110c565b905091905056fea26469706673582212203a5de9a2937bd2bfb5f619874fd0f60d301821d6c15ea8f4b06923ddecf8f88e64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100385760003560e01c8063078c4830146100445780630babd8641461006d5780635e9de659146100985761003f565b3661003f57005b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190610757565b6100b4565b005b34801561007957600080fd5b5061008261038d565b60405161008f9190610855565b60405180910390f35b6100b260048036038101906100ad9190610870565b6103b1565b005b3073ffffffffffffffffffffffffffffffffffffffff168160000160208101906100de91906108fb565b73ffffffffffffffffffffffffffffffffffffffff161461014a5780600001602081019061010c91906108fb565b306040517fb52905ef000000000000000000000000000000000000000000000000000000008152600401610141929190610937565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036101b0576040517fceef985700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff16636c3bc78584846040518363ffffffff1660e01b81526004016101ed929190610ec1565b6020604051808303816000875af115801561020c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102309190610f0d565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004016102ad929190610f49565b6020604051808303816000875af11580156102cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f09190610faa565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040161034a9190610fd7565b600060405180830381600087803b15801561036457600080fd5b505af1158015610378573d6000803e3d6000fd5b5050505061038684826105ab565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b806020013534146103ff573481602001356040517f71d5abb30000000000000000000000000000000000000000000000000000000081526004016103f6929190610ff2565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db082602001356040518263ffffffff1660e01b81526004016000604051808303818588803b15801561046b57600080fd5b505af115801561047f573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b38483602001356040518363ffffffff1660e01b81526004016104e3929190610f49565b6020604051808303816000875af1158015610502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105269190610faa565b508273ffffffffffffffffffffffffffffffffffffffff1663ac79e30183836040518363ffffffff1660e01b8152600401610562929190610ec1565b6020604051808303816000875af1158015610581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a59190610f0d565b50505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff8111156105e0576105df61101b565b5b6040519080825280601f01601f1916602001820160405280156106125781602001600182028036833780820191505090505b5060405161062091906110bb565b60006040518083038185875af1925050503d806000811461065d576040519150601f19603f3d011682016040523d82523d6000602084013e610662565b606091505b50509050806106a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069d9061112f565b60405180910390fd5b505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106e0826106b5565b9050919050565b6106f0816106d5565b81146106fb57600080fd5b50565b60008135905061070d816106e7565b92915050565b600080fd5b60006101c0828403121561072f5761072e610713565b5b81905092915050565b600060c0828403121561074e5761074d610713565b5b81905092915050565b60008060008060808587031215610771576107706106ab565b5b600061077f878288016106fe565b9450506020610790878288016106fe565b935050604085013567ffffffffffffffff8111156107b1576107b06106b0565b5b6107bd87828801610718565b925050606085013567ffffffffffffffff8111156107de576107dd6106b0565b5b6107ea87828801610738565b91505092959194509250565b6000819050919050565b600061081b610816610811846106b5565b6107f6565b6106b5565b9050919050565b600061082d82610800565b9050919050565b600061083f82610822565b9050919050565b61084f81610834565b82525050565b600060208201905061086a6000830184610846565b92915050565b600080600060608486031215610889576108886106ab565b5b6000610897868287016106fe565b935050602084013567ffffffffffffffff8111156108b8576108b76106b0565b5b6108c486828701610718565b925050604084013567ffffffffffffffff8111156108e5576108e46106b0565b5b6108f186828701610738565b9150509250925092565b600060208284031215610911576109106106ab565b5b600061091f848285016106fe565b91505092915050565b610931816106d5565b82525050565b600060408201905061094c6000830185610928565b6109596020830184610928565b9392505050565b600082905092915050565b600082905092915050565b82818337505050565b61098b60408383610976565b5050565b600082905092915050565b600060029050919050565b600081905092915050565b6000819050919050565b60006109c6838361097f565b60408301905092915050565b6000604082019050919050565b6109e88161099a565b6109f281846109a5565b92506109fd826109b0565b8060005b83811015610a3657610a13828461096b565b610a1d87826109ba565b9650610a28836109d2565b925050600181019050610a01565b505050505050565b6101008201610a50600083018361096b565b610a5d600085018261097f565b50610a6b604083018361098f565b610a7860408501826109df565b50610a8660c083018361096b565b610a9360c085018261097f565b50505050565b6000819050919050565b610aac81610a99565b8114610ab757600080fd5b50565b600081359050610ac981610aa3565b92915050565b6000610ade6020840184610aba565b905092915050565b610aef81610a99565b82525050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610b2157610b20610aff565b5b83810192508235915060208301925067ffffffffffffffff821115610b4957610b48610af5565b5b602082023603831315610b5f57610b5e610afa565b5b509250929050565b600082825260208201905092915050565b600080fd5b6000610b898385610b67565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115610bbc57610bbb610b78565b5b602083029250610bcd838584610976565b82840190509392505050565b600082905092915050565b610bf060408383610976565b5050565b6000819050919050565b610c0781610bf4565b8114610c1257600080fd5b50565b600081359050610c2481610bfe565b92915050565b6000610c396020840184610c15565b905092915050565b610c4a81610bf4565b82525050565b60006101c08301610c646000840184610960565b610c716000860182610a3e565b50610c80610100840184610acf565b610c8e610100860182610ae6565b50610c9d610120840184610b04565b858303610120870152610cb1838284610b7d565b92505050610cc3610140840184610bd9565b610cd1610140860182610be4565b50610ce0610180840184610c2a565b610cee610180860182610c41565b50610cfd6101a0840184610acf565b610d0b6101a0860182610ae6565b508091505092915050565b6000610d2560208401846106fe565b905092915050565b610d36816106d5565b82525050565b60008083356001602003843603038112610d5957610d58610aff565b5b83810192508235915060208301925067ffffffffffffffff821115610d8157610d80610af5565b5b600182023603831315610d9757610d96610afa565b5b509250929050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610ddc8385610d9f565b9350610de9838584610db0565b610df283610dbf565b840190509392505050565b600060c08301610e106000840184610d16565b610e1d6000860182610d2d565b50610e2b6020840184610c2a565b610e386020860182610c41565b50610e466040840184610d16565b610e536040860182610d2d565b50610e616060840184610c2a565b610e6e6060860182610c41565b50610e7c6080840184610d3c565b8583036080870152610e8f838284610dd0565b92505050610ea060a0840184610d3c565b85830360a0870152610eb3838284610dd0565b925050508091505092915050565b60006040820190508181036000830152610edb8185610c50565b90508181036020830152610eef8184610dfd565b90509392505050565b600081519050610f0781610bfe565b92915050565b600060208284031215610f2357610f226106ab565b5b6000610f3184828501610ef8565b91505092915050565b610f4381610bf4565b82525050565b6000604082019050610f5e6000830185610928565b610f6b6020830184610f3a565b9392505050565b60008115159050919050565b610f8781610f72565b8114610f9257600080fd5b50565b600081519050610fa481610f7e565b92915050565b600060208284031215610fc057610fbf6106ab565b5b6000610fce84828501610f95565b91505092915050565b6000602082019050610fec6000830184610f3a565b92915050565b60006040820190506110076000830185610f3a565b6110146020830184610f3a565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050919050565b600081905092915050565b60005b8381101561107e578082015181840152602081019050611063565b60008484015250505050565b60006110958261104a565b61109f8185611055565b93506110af818560208601611060565b80840191505092915050565b60006110c7828461108a565b915081905092915050565b600082825260208201905092915050565b7f4554485f5452414e534645525f4641494c454400000000000000000000000000600082015250565b60006111196013836110d2565b9150611124826110e3565b602082019050919050565b600060208201905081810360008301526111488161110c565b905091905056fea26469706673582212203a5de9a2937bd2bfb5f619874fd0f60d301821d6c15ea8f4b06923ddecf8f88e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}